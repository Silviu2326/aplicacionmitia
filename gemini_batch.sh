#!/usr/bin/env bash
# gemini_batch.sh – Recorre muchos prompts, uno por uno.

set -euo pipefail

# ─── Carpeta temporal DENTRO del proyecto ─────────────────────────────
TMPDIR="$(mktemp -d "$PWD/.gemini_prompts.XXXXXX")"
trap 'rm -rf "$TMPDIR"' EXIT         # limpieza automática

# ─── Fuente de prompts ────────────────────────────────────────────────
if [[ $# -gt 0 && -f "$1" ]]; then
  mapfile -t prompts < "$1"          # un prompt por línea de archivo
else
prompts=(
   $'# User Story: Detección de dispositivo y guía de instalación para iOS\n\n## Descripción\nComo usuario de un iPhone/iPad, quiero ver instrucciones claras y específicas para Safari sobre cómo añadir la aplicación a mi pantalla de inicio, para poder instalar la PWA fácilmente a pesar de la falta de un prompt automático.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n- @src/features/pgina-de-instalacin-como-pwa/components/IosInstallGuide.tsx\n\n## Componentes a Crear\n- IosInstallGuide (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl hook `usePáginadeInstalacióncomoPWA` debe incluir una función para detectar el sistema operativo del usuario (User Agent). Si se detecta iOS, debe establecer un estado booleano (`isIos`). La página principal (`PáginadeInstalacióncomoPWAPage`) usará este estado para renderizar condicionalmente el componente `IosInstallGuide`, que mostrará los pasos de manera estática.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al visitar /instalar-pwa desde un dispositivo iOS, la página debe mostrar una sección con instrucciones.\n2. Las instrucciones deben incluir texto y iconos que guíen al usuario: 1. Pulsar el botón \'Compartir\' en Safari. 2. Seleccionar la opción \'Añadir a pantalla de inicio\'.\n3. La sección de instrucciones para iOS no debe ser visible en dispositivos Android o de escritorio.\n4. El botón de instalación genérico (si existe) debe estar oculto en iOS.\n\n## Sugerencias Adicionales\n- Considerar incluir una breve animación o GIF que demuestre el proceso en un iPhone.\n- El texto podría cambiar ligeramente si se detecta un iPad para ser más específico.\n\n## Tarea para Editor IA\nCrea el componente `IosInstallGuide` que muestre una lista ordenada con los pasos para instalar la PWA en iOS. Utiliza iconos de una librería como `react-icons` para representar el botón de compartir y el de añadir. Implementa la lógica de detección de User-Agent en el hook `usePáginadeInstalacióncomoPWA.ts` para exportar un booleano `isIos`.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Activación del prompt de instalación en navegadores compatibles\n\n## Descripción\nComo usuario de Android o de un navegador de escritorio compatible (Chrome, Edge), quiero que se muestre un botón claro de \'Instalar App\' que active el prompt nativo del navegador, para poder instalar la PWA con un solo clic.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n- @src/components/Button.jsx\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl hook `usePáginadeInstalacióncomoPWA` debe registrar un event listener para el evento `beforeinstallprompt`. Al capturarlo, debe prevenir el comportamiento por defecto y almacenar el evento en un estado. Expondrá una función para llamar a `prompt()` sobre el evento almacenado y un booleano para indicar si el prompt está disponible. La página usará este booleano para mostrar el botón de instalación.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. En un navegador compatible, el botón \'Instalar App\' debe estar visible en la página.\n2. Al hacer clic en el botón, debe aparecer el diálogo de instalación nativo del navegador.\n3. El botón no debe ser visible si la aplicación ya está instalada (usando `window.matchMedia(\'(display-mode: standalone)\')`).\n4. El botón no debe ser visible en navegadores no compatibles (como Safari en iOS o Firefox en escritorio).\n\n## Sugerencias Adicionales\n- Una vez que el usuario interactúa con el prompt (acepta o rechaza), el botón debería ocultarse para la sesión actual para evitar molestar.\n- Añadir un ícono de descarga o instalación al lado del texto del botón.\n\n## Tarea para Editor IA\nEn el hook `usePáginadeInstalacióncomoPWA.ts`, implementa la lógica para capturar y manejar el evento `beforeinstallprompt`. Crea un estado `installPrompt` para guardar el evento y una función `handleInstall` que lo dispare. En el componente `PáginadeInstalacióncomoPWAPage.tsx`, importa el componente `Button` y muéstralo solo si `installPrompt` no es nulo, asociando su `onClick` a `handleInstall`.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Visualización de beneficios de la PWA\n\n## Descripción\nComo usuario indeciso, quiero ver una sección que resalte las ventajas de instalar la aplicación (ej. acceso offline, más rápido, notificaciones), para entender el valor que me aporta y motivarme a completar la instalación.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/components/PwaBenefits.tsx\n\n## Componentes a Crear\n- PwaBenefits (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl componente `PwaBenefits` contendrá un array de objetos, donde cada objeto representa un beneficio y tiene propiedades como `icon`, `title` y `description`. El componente mapeará este array para renderizar una lista o una cuadrícula de tarjetas de beneficios. No requiere lógica de estado compleja.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página debe mostrar una sección con al menos tres beneficios claros.\n2. Cada beneficio debe tener un ícono, un título y una descripción corta.\n3. La sección debe ser visualmente atractiva y fácil de leer tanto en móvil como en escritorio.\n4. Los beneficios deben ser relevantes para la app TheraFlow (ej: \'Accede a tus sesiones desde tu pantalla de inicio\', \'Recibe recordatorios de tus citas\').\n\n## Sugerencias Adicionales\n- Usar animaciones sutiles de entrada para que las tarjetas de beneficios aparezcan al hacer scroll.\n- Realizar tests A/B con diferentes beneficios para ver cuáles convierten mejor.\n\n## Tarea para Editor IA\nCrea el componente `PwaBenefits.tsx`. Define un array local con 3-4 objetos de beneficios (ícono, título, texto). Renderiza estos beneficios en un layout de rejilla (grid) usando Tailwind CSS. Cada item de la rejilla debe ser una tarjeta con el ícono, el título en negrita y el texto descriptivo.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Manejo de navegadores y dispositivos no compatibles\n\n## Descripción\nComo usuario que accede desde un navegador que no soporta PWA (ej. Firefox en escritorio), quiero ver un mensaje informativo que me explique por qué no puedo instalar la app y me sugiera alternativas, para no sentirme frustrado o pensar que la página está rota.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n- @src/features/pgina-de-instalacin-como-pwa/components/CompatibilityNotice.tsx\n\n## Componentes a Crear\n- CompatibilityNotice (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nLa lógica de detección en el hook `usePáginadeInstalacióncomoPWA` debe ampliarse para identificar explícitamente navegadores no compatibles (ej. `!window.beforeinstallprompt && !isIos`). Debe exportar un booleano `isUnsupported`. La página principal usará este estado para mostrar el componente `CompatibilityNotice` en lugar de las opciones de instalación.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al acceder desde un navegador de escritorio como Firefox, se debe mostrar un mensaje de incompatibilidad.\n2. El mensaje debe explicar que la función de instalación no está disponible en su navegador actual.\n3. El mensaje debe sugerir el uso de navegadores compatibles como Chrome o Edge.\n4. Las guías de instalación para iOS y el botón para Android/Desktop no deben ser visibles.\n\n## Sugerencias Adicionales\n- El mensaje puede incluir un enlace a la página principal para que el usuario pueda seguir usando la aplicación web normalmente.\n- Detectar si es un navegador móvil no compatible (ej. Firefox en Android) y dar un mensaje ligeramente diferente.\n\n## Tarea para Editor IA\nAmplía el hook `usePáginadeInstalacióncomoPWA.ts` para que devuelva un booleano `isUnsupportedBrowser`. Crea el componente `CompatibilityNotice.tsx` que renderice un cuadro de alerta con el texto informativo y sugerencias de navegadores. En la página principal, renderiza condicionalmente este componente si `isUnsupportedBrowser` es true.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Confirmación visual tras iniciar la instalación\n\n## Descripción\nComo usuario, después de hacer clic en \'Instalar\' en el prompt nativo, quiero recibir una confirmación visual en la página, para saber que mi acción tuvo éxito y que el proceso ha comenzado.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n\n## Componentes a Crear\n- InstallConfirmationToast (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEn el hook, la función que llama a `installPrompt.prompt()` debe procesar la promesa `userChoice`. Si `result.outcome === \'accepted\'`, se debe actualizar un estado (ej. `setInstallationState(\'success\')`). La página principal observará este estado y, cuando sea \'success\', mostrará un mensaje de confirmación (ej. un \'toast\' o notificación) que se oculte automáticamente después de unos segundos.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Después de que el usuario acepte la instalación desde el prompt, el botón de \'Instalar App\' debe desaparecer.\n2. Un mensaje de confirmación como \'¡Éxito! TheraFlow se está instalando en tu dispositivo\' debe aparecer en pantalla.\n3. El mensaje de confirmación debe desaparecer automáticamente después de 5-7 segundos.\n4. Si el usuario rechaza la instalación, no se debe mostrar ningún mensaje de confirmación.\n\n## Sugerencias Adicionales\n- El mensaje podría incluir una pequeña guía como \'Búscanos en tu lista de aplicaciones\' para orientar al usuario.\n- Podríamos guardar en `localStorage` que el usuario ya instaló la app para no volver a mostrar la página `/instalar-pwa` en futuras visitas.\n\n## Tarea para Editor IA\nModifica la función `handleInstall` en el hook para que maneje la promesa `userChoice`. Introduce un nuevo estado, por ejemplo `installationStatus`, que pueda ser \'idle\', \'success\' o \'dismissed\'. En la página, renderiza un componente de \'toast\' o notificación cuando `installationStatus` sea \'success\'.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Acceso directo a la página de instalación desde otras partes de la web\n\n## Descripción\nComo usuario recurrente que aún no ha instalado la app, quiero ver un recordatorio o un enlace discreto en el pie de página o en el menú para acceder a la página de instalación, para poder hacerlo cuando me sea conveniente sin tener que recordar la URL.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/components/Sidebar.jsx\n- @src/features/home-pblica/HomepúblicaPage.tsx\n- @src/features/panel-del-usuario-cliente/PaneldelUsuario(Cliente)Page.tsx\n\n## Lógica y Datos\nEsta historia no afecta directamente a la página `/instalar-pwa`, sino a cómo se llega a ella. Se necesita un hook global o un contexto que verifique si la PWA puede ser instalada (`beforeinstallprompt` fue disparado) y si aún no está en modo standalone. Este estado global sería consumido por componentes comunes como el `Sidebar` o un futuro `Footer` para mostrar condicionalmente un enlace a `/instalar-pwa`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Un enlace a \'/instalar-pwa\' debe ser visible en el `Sidebar` o en un `Footer` global.\n2. El enlace solo debe ser visible si el navegador es compatible con la instalación y la app no está ya instalada.\n3. El enlace debe tener un texto claro como \'Instalar aplicación\' o un ícono de descarga.\n4. Hacer clic en el enlace debe navegar correctamente a la página `/instalar-pwa`.\n\n## Sugerencias Adicionales\n- Se podría implementar un componente `Banner` que aparezca en la parte superior de la página de forma no intrusiva la primera vez que un usuario compatible visita el sitio.\n- El enlace podría desaparecer una vez que el usuario ha instalado la aplicación.\n\n## Tarea para Editor IA\nModifica el componente `src/components/Sidebar.jsx` para incluir un nuevo item de navegación. Este item debe usar un `NavLink` o `Link` de `react-router-dom` que apunte a `/instalar-pwa`. La lógica para mostrar/ocultar este enlace debe provenir de un futuro hook de contexto que gestione el estado de la PWA.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/components\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Personalización del Mensaje de Instalación para Usuarios Logueados\n\n## Descripción\nComo usuario registrado en TheraFlow, quiero ver un mensaje de bienvenida personalizado (ej. \'Hola, [Mi Nombre]\') y un recordatorio contextual, como mi próxima cita, en la página de instalación, para sentir que la app es una extensión natural de mi experiencia y aumentar mi motivación para instalarla.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n- @src/features/pgina-de-instalacin-como-pwa/api.ts\n\n## Componentes a Crear\n- PersonalizedWelcomeHeader (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl hook `usePáginadeInstalacióncomoPWA` debe incluir lógica para verificar el estado de autenticación del usuario. Si está logueado, debe obtener su nombre y la información de su próxima cita (si existe) del estado global o mediante una nueva llamada a la API. Esta información se pasará como props al componente `PersonalizedWelcomeHeader`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Si el usuario está logueado, la página debe mostrar \'Hola, [Nombre del Usuario]\'.\n2. Si el usuario logueado tiene una cita próxima, debe mostrar un mensaje como \'Prepárate para tu sesión el [Fecha] a las [Hora]\'.\n3. Si el usuario no está logueado, se debe mostrar el encabezado genérico de la página.\n4. La carga de los datos personales no debe bloquear el renderizado del resto de la página.\n\n## Sugerencias Adicionales\n- Considerar mostrar un mensaje diferente si el usuario es un profesional (\'Gestiona tu próxima cita con [Nombre del Cliente]\').\n\n## Tarea para Editor IA\nCrea el componente `PersonalizedWelcomeHeader.tsx` en `src/features/pgina-de-instalacin-como-pwa/components/`. Modifica `usePáginadeInstalacióncomoPWA.ts` para obtener el estado del usuario y sus citas. Integra el nuevo componente en `PáginadeInstalacióncomoPWAPage.tsx`, pasándole los datos del usuario.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Preview Animada de Funcionalidades Exclusivas de la PWA\n\n## Descripción\nComo usuario, quiero ver una breve animación o un carrusel visual que demuestre las funcionalidades clave de la PWA, como el acceso offline al diario personal o las notificaciones instantáneas, para entender rápidamente los beneficios prácticos y sentirme más atraído a instalarla.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n\n## Componentes a Crear\n- FeaturePreview (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl componente será principalmente visual. Los datos (título, descripción corta e imagen/animación para cada característica) pueden ser un array de objetos estáticos definido dentro del componente o pasado como props.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. El componente debe mostrar al menos tres beneficios clave de la PWA.\n2. Cada beneficio debe tener un título claro, una descripción concisa y un elemento visual (icono o animación corta).\n3. La animación debe ser fluida y no impactar negativamente el rendimiento de la página.\n4. El componente debe ser responsivo y visualizarse correctamente en dispositivos móviles.\n\n## Sugerencias Adicionales\n- Usar Lottie para animaciones SVG complejas pero ligeras.\n\n## Tarea para Editor IA\nCrea el componente `FeaturePreview.tsx` en `src/features/pgina-de-instalacin-como-pwa/components/`. Diseña 3 \'slides\' mostrando: 1) Notificaciones Push, 2) Acceso Offline al Diario, 3) Acceso Rápido desde la pantalla de inicio. Integra este componente en `PáginadeInstalacióncomoPWAPage.tsx`.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Incentivo Exclusivo por Instalar la PWA\n\n## Descripción\nComo cliente, quiero que se me ofrezca una pequeña recompensa, como un cupón de descuento para mi próxima sesión, que se active automáticamente al instalar la PWA, para tener un incentivo tangible e inmediato que me motive a completar la instalación.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n- @src/features/pgina-de-instalacin-como-pwa/api.ts\n\n## Componentes a Crear\n- InstallationRewardCard (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl hook `usePáginadeInstalacióncomoPWA` debe escuchar el evento \'appinstalled\'. Al dispararse, debe llamar a un nuevo endpoint en `api.ts` para que el backend aplique el descuento a la cuenta del usuario. La UI debe actualizarse para confirmar que la recompensa ha sido aplicada.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La oferta de recompensa debe ser visible solo para usuarios de tipo \'cliente\' que no hayan instalado la app.\n2. Tras la instalación exitosa de la PWA, el componente debe cambiar su estado para mostrar \'¡Descuento aplicado!\'.\n3. El evento \'appinstalled\' debe disparar una llamada a la API para registrar la recompensa.\n4. Si el usuario ya tiene la app instalada, este componente no debe mostrarse.\n\n## Sugerencias Adicionales\n- La lógica para aplicar el cupón en el backend debe ser robusta para evitar abusos.\n\n## Tarea para Editor IA\nCrea el componente `InstallationRewardCard.tsx`. En `usePáginadeInstalacióncomoPWA.ts`, añade un `useEffect` con un event listener para \'appinstalled\'. Al activarse, llama a una nueva función (a definir en `api.ts`) `applyInstallationReward()` y actualiza un estado local para cambiar el mensaje en la UI.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Guía Rápida de \'Siguientes Pasos\' Post-Instalación\n\n## Descripción\nComo nuevo usuario de la PWA, justo después de instalarla, quiero ver una guía rápida de \'Siguientes Pasos\' en la página, como \'Activa las notificaciones\' o \'Accede a tu diario\', para ser guiado inmediatamente hacia las funciones de mayor valor y empezar a usar la app de forma efectiva.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n\n## Componentes a Crear\n- PostInstallGuide (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl hook `usePáginadeInstalacióncomoPWA` debe tener un estado (ej. `isInstalled`). El listener del evento \'appinstalled\' debe cambiar este estado a `true`. El componente `PáginadeInstalacióncomoPWAPage.tsx` usará este estado para ocultar el contenido de instalación y mostrar el componente `PostInstallGuide`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. El componente `PostInstallGuide` debe estar oculto por defecto.\n2. Tras la detección del evento \'appinstalled\', el contenido principal de la página se oculta y se muestra la guía.\n3. La guía debe presentar al menos dos acciones sugeridas (ej. \'Activar notificaciones\', \'Ver mi panel\').\n4. Cada acción debe tener un botón o enlace que, idealmente, lleve al usuario a la sección correspondiente de la app.\n\n## Sugerencias Adicionales\n- Se puede incluir un botón de \'Abrir App\' para que el usuario pueda lanzar la PWA inmediatamente.\n\n## Tarea para Editor IA\nCrea el componente `PostInstallGuide.tsx` en la carpeta de componentes de la feature. En `usePáginadeInstalacióncomoPWA.ts`, maneja un estado `isInstalled`. En `PáginadeInstalacióncomoPWAPage.tsx`, renderiza condicionalmente la guía basándote en este estado.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Visualización de Testimonios Enfocados en la Experiencia de la App\n\n## Descripción\nComo usuario que valora las opiniones de otros, quiero ver una sección con testimonios cortos de clientes reales que mencionen específicamente su experiencia positiva con la aplicación móvil (PWA), para generar confianza y reforzar los beneficios de velocidad y conveniencia.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n\n## Componentes a Crear\n- AppTestimonialCard (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Módulos a Importar\n- Carousel from src/features/home-pblica/components/Carousel.tsx\n\n## Lógica y Datos\nSe necesita un array de objetos con los datos de los testimonios (cita, autor, rating). Inicialmente puede ser estático, pero idealmente se obtendría de la API para mostrar testimonios reales y relevantes.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Se debe mostrar una sección con al menos dos testimonios.\n2. Cada testimonio debe centrarse en un beneficio de la PWA (ej. \'¡Es súper rápida!\', \'Me encantan los recordatorios\').\n3. El nombre del autor del testimonio debe ser visible.\n4. Si se usa un carrusel, la navegación debe ser fácil e intuitiva en móviles.\n\n## Sugerencias Adicionales\n- Considerar obtener estos testimonios de una categoría específica del sistema de valoraciones.\n\n## Tarea para Editor IA\nCrea el componente `AppTestimonialCard.tsx`. En `PáginadeInstalacióncomoPWAPage.tsx`, importa el `Carousel` y `AppTestimonialCard`. Define un array de datos de testimonios y úsalo para renderizar una sección de testimonios en carrusel.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Presentación de Beneficios Diferenciados para Profesionales\n\n## Descripción\nComo profesional de la salud mental, quiero que la página de instalación de la PWA me muestre beneficios específicos para mi rol, como \'gestión de agenda sobre la marcha\' o \'comunicación segura e instantánea con clientes\', para entender cómo la app optimizará mi trabajo y no solo la experiencia del cliente.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n- @src/features/pgina-de-instalacin-como-pwa/hooks/usePáginadeInstalacióncomoPWA.ts\n\n## Componentes a Crear\n- RoleBasedBenefits (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nEl hook `usePáginadeInstalacióncomoPWA` debe determinar el rol del usuario (si está logueado). Esta información se pasa al componente `RoleBasedBenefits`. Se deben definir dos conjuntos de datos de beneficios: uno para clientes y otro para profesionales.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Si el usuario es un profesional, la lista de beneficios debe incluir puntos como \'Gestiona tu calendario\', \'Responde a mensajes de forma segura\', etc.\n2. Si el usuario es un cliente o no está logueado, se debe mostrar la lista de beneficios estándar (acceso offline, notificaciones, etc.).\n3. El cambio entre listas de beneficios debe ser instantáneo basado en la detección del rol.\n4. El componente `RoleBasedBenefits` debe estar claramente separado de otros elementos de la página.\n\n## Sugerencias Adicionales\n- El contenido puede ser gestionado a través de un CMS para facilitar futuras actualizaciones.\n\n## Tarea para Editor IA\nCrea el componente `RoleBasedBenefits.tsx`. Define dos arrays de strings/objetos con los beneficios para cada rol. Modifica el hook `usePáginadeInstalacióncomoPWA` para detectar el rol del usuario. En la página principal, renderiza `RoleBasedBenefits` pasándole el rol detectado.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Mini-Demo Interactiva de una Función Clave\n\n## Descripción\nComo usuario indeciso, quiero poder \'jugar\' con una demo interactiva de una función de la PWA, como un simulador de chat o un diario de muestra, directamente en la página de instalación, para experimentar su funcionamiento y valor antes de decidir instalarla.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n\n## Componentes a Crear\n- InteractivePWADemo (component)\n- DeviceFrame (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nLa lógica de la demo (manejo de estado para el texto del input, mostrar mensajes falsos) estará encapsulada dentro del componente `InteractivePWADemo`. No requiere llamadas a la API.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página debe mostrar un componente que parece una pantalla de teléfono.\n2. Dentro del marco del teléfono, el usuario puede interactuar con una función simulada (ej. escribir y \'enviar\' un mensaje).\n3. La interacción debe ser fluida y proporcionar retroalimentación visual inmediata.\n4. La demo no debe realizar ninguna acción real (como guardar datos o enviar notificaciones).\n\n## Sugerencias Adicionales\n- Se puede añadir un botón de \'resetear demo\' para que el usuario pueda probarla de nuevo.\n\n## Tarea para Editor IA\nCrea los componentes `DeviceFrame.tsx` e `InteractivePWADemo.tsx`. `InteractivePWADemo` debe simular una interfaz de chat con un campo de texto y un botón de enviar, que añade un \'mensaje\' a una lista en pantalla. Integra este widget en la página de instalación.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Visualización de Métricas de Rendimiento y Ahorro de Datos\n\n## Descripción\nComo usuario preocupado por el rendimiento de mi móvil y mi plan de datos, quiero ver métricas claras y cuantificables en la página de instalación, como \'Carga 2x más rápido\' o \'Usa 80% menos datos que el sitio web\', para justificar la instalación desde un punto de vista técnico y práctico.\n\n## Contexto de la Página\nPágina de Instalación como PWA\n\n## Archivos Afectados\n- @src/features/pgina-de-instalacin-como-pwa/PáginadeInstalacióncomoPWAPage.tsx\n\n## Componentes a Crear\n- PerformanceMetric (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-instalacin-como-pwa/components\n\n## Lógica y Datos\nLos datos para las métricas serán estáticos y se basarán en análisis de rendimiento previos. Se pueden almacenar en un array de objetos y mapear para renderizar varios componentes `PerformanceMetric`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Se debe mostrar una sección con al menos tres métricas de rendimiento/ahorro.\n2. Cada métrica debe tener un icono representativo (velocidad, datos, batería).\n3. El valor numérico o el dato principal debe ser grande y fácil de leer.\n4. Una breve descripción debe explicar el beneficio de cada métrica.\n\n## Sugerencias Adicionales\n- Añadir un pequeño tooltip a cada métrica explicando cómo se midió para aumentar la credibilidad.\n\n## Tarea para Editor IA\nCrea el componente `PerformanceMetric.tsx`. En `PáginadeInstalacióncomoPWAPage.tsx`, crea una sección con un layout de rejilla (grid) y renderiza 3 o 4 instancias de `PerformanceMetric` con datos sobre velocidad, uso de datos y acceso directo.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-instalacin-como-pwa\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Visualización de Preguntas Frecuentes (FAQ) por Categorías\n\n## Descripción\nComo un usuario (cliente o profesional), quiero ver una lista de preguntas frecuentes organizadas por categorías para poder encontrar rápidamente soluciones a problemas comunes por mi cuenta.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n- @src/features/pgina-de-soporte--ayuda/components/FAQAccordion.tsx\n\n## Componentes a Crear\n- FAQAccordion (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Lógica y Datos\nEl hook `usePáginadeSoporte/Ayuda.ts` debe realizar una llamada a través de `api.ts` para obtener una lista de todas las FAQs. La respuesta esperada es un array de objetos, cada uno con `id`, `pregunta`, `respuesta` y `categoria`. La página agrupará estas FAQs por `categoria` y las pasará al componente `FAQAccordion` para su renderización. Se debe manejar el estado de carga y posibles errores.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página debe mostrar un título principal como \'Preguntas Frecuentes\'.\n2. Las FAQs deben estar agrupadas visualmente por categorías.\n3. Al hacer clic en una pregunta, su respuesta correspondiente debe mostrarse u ocultarse con una animación suave (acordeón).\n4. Por defecto, todas las respuestas deben estar ocultas.\n5. Se debe mostrar un indicador visual (p.ej., un icono de \'cargando\' o \'spinner\') mientras se obtienen los datos de las FAQs.\n\n## Sugerencias Adicionales\n- Considerar que un administrador pueda gestionar las FAQs desde el `backoffice-de-administracin`.\n- Añadir un contador junto a cada categoría que indique cuántas preguntas contiene.\n\n## Tarea para Editor IA\nCrea el componente `FAQAccordion.tsx` que acepte como props un título de categoría y un array de objetos `{pregunta, respuesta}`. Implementa la lógica para expandir y colapsar cada pregunta individualmente. En `PáginadeSoporte/AyudaPage.tsx`, obtén los datos del hook y renderiza una instancia de `FAQAccordion` por cada categoría única.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Envío de Consulta a través de Formulario de Contacto\n\n## Descripción\nComo un usuario, quiero rellenar y enviar un formulario de contacto para poder plantear una duda específica que no encuentro en las FAQs y recibir una respuesta por email.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n- @src/features/pgina-de-soporte--ayuda/components/ContactForm.tsx\n\n## Componentes a Crear\n- ContactForm (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl componente `ContactForm` manejará su propio estado interno para los campos del formulario. Al enviar, llamará a una función exportada por el hook `usePáginadeSoporte/Ayuda.ts`, que a su vez hará una petición POST a través de `api.ts`. Si el usuario está logueado, los campos de nombre y email deben ser pre-rellenados. El hook debe gestionar los estados de \'enviando\', \'éxito\' y \'error\'.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. El formulario debe incluir campos para \'Nombre\', \'Email\', \'Asunto\' y \'Mensaje\'.\n2. Todos los campos son obligatorios.\n3. El campo de email debe tener validación de formato.\n4. El botón de \'Enviar\' debe estar deshabilitado mientras la solicitud está en curso.\n5. Tras el envío exitoso, se debe mostrar un mensaje de confirmación y limpiar el formulario.\n6. Si ocurre un error durante el envío, se debe mostrar un mensaje de error al usuario.\n\n## Sugerencias Adicionales\n- Añadir un `select` o `dropdown` para que el usuario pueda categorizar su consulta (p. ej., \'Problema técnico\', \'Facturación\', \'Sugerencia\').\n- Implementar reCAPTCHA para prevenir spam.\n\n## Tarea para Editor IA\nCrea el componente `ContactForm.tsx`. Implementa la validación de campos. En el hook `usePáginadeSoporte/Ayuda.ts`, crea una función asíncrona para manejar el envío del formulario que interactúe con `api.ts`. Conecta esta lógica con el componente `ContactForm` en la página principal de soporte.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Búsqueda de Contenido en Preguntas Frecuentes\n\n## Descripción\nComo un usuario, quiero un campo de búsqueda para filtrar las FAQs por palabras clave y encontrar la información que necesito de forma más directa y rápida.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n\n## Lógica y Datos\nSe añadirá un estado para el término de búsqueda en el hook `usePáginadeSoporte/Ayuda.ts`. La lógica de filtrado se aplicará sobre la lista de FAQs ya obtenida. El filtrado debe ser insensible a mayúsculas/minúsculas y buscar coincidencias tanto en la pregunta como en la respuesta. Se recomienda usar \'debouncing\' en la entrada de texto para no filtrar en cada pulsación de tecla.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debe existir un campo de entrada de texto para la búsqueda encima de la lista de FAQs.\n2. A medida que el usuario escribe, la lista de FAQs visibles se actualiza para mostrar solo aquellas que contienen el texto buscado.\n3. Si el campo de búsqueda está vacío, se muestran todas las FAQs.\n4. Si la búsqueda no arroja resultados, se debe mostrar un mensaje como \'No se encontraron resultados para tu búsqueda\'.\n5. La búsqueda debe funcionar sin necesidad de recargar la página.\n\n## Sugerencias Adicionales\n- Añadir un botón para limpiar el campo de búsqueda con un solo clic.\n- Al filtrar, las categorías que no contengan resultados podrían ocultarse.\n\n## Tarea para Editor IA\nModifica `PáginadeSoporte/AyudaPage.tsx` para añadir un input de búsqueda. Modifica el hook `usePáginadeSoporte/Ayuda.ts` para añadir la lógica de estado y filtrado. Conecta el input al estado del hook y usa los datos filtrados para renderizar los componentes `FAQAccordion`.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Seguimiento de Incidencias de Soporte para Usuarios Registrados\n\n## Descripción\nComo un usuario registrado (cliente o profesional), quiero ver un historial de mis incidencias enviadas y su estado actual (Abierto, Resuelto, etc.) para poder hacer un seguimiento de mis consultas.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n- @src/features/pgina-de-soporte--ayuda/components/TicketHistory.tsx\n\n## Componentes a Crear\n- TicketHistory (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- Table from src/components/Table.jsx\n\n## Lógica y Datos\nEl hook `usePáginadeSoporte/Ayuda.ts` debe verificar si el usuario está autenticado. Si lo está, realizará una llamada a un nuevo endpoint en `api.ts` para obtener los tickets de soporte del usuario. Los datos (ID, asunto, fecha, estado) se mostrarán en el componente `TicketHistory` utilizando el componente genérico `Table`. La página principal renderizará este componente condicionalmente.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La sección de historial de incidencias solo es visible para usuarios autenticados.\n2. Se muestra una tabla con las columnas: \'ID de Ticket\', \'Asunto\', \'Fecha de Creación\', y \'Estado\'.\n3. La lista de tickets está ordenada por fecha de creación, del más reciente al más antiguo.\n4. Si el usuario no tiene incidencias, se muestra un mensaje informativo.\n5. Al hacer clic en una fila, se podría navegar a una página de detalle de la incidencia (funcionalidad futura).\n\n## Sugerencias Adicionales\n- Implementar paginación para la tabla si un usuario puede tener muchos tickets.\n- Añadir una columna \'Última Actualización\' para mayor claridad.\n\n## Tarea para Editor IA\nCrea el componente `TicketHistory.tsx` que use el `Table.jsx` genérico. En el hook, implementa la lógica para obtener los tickets del usuario si está autenticado. En `PáginadeSoporte/AyudaPage.tsx`, renderiza `TicketHistory` condicionalmente basado en el estado de autenticación del usuario.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Acceso a Canales de Contacto Directo\n\n## Descripción\nComo un usuario, quiero ver claramente las diferentes formas de contactar con soporte (email, chat) además del formulario, para poder elegir el método que mejor se adapte a mi urgencia y preferencia.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/components/ContactChannels.tsx\n\n## Componentes a Crear\n- ContactChannels (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Lógica y Datos\nEste componente será mayormente estático. Mostrará la información de contacto que se defina. Por ejemplo, un `mailto:` link para el email de soporte y un botón que inicie el widget de chat en vivo (si se implementa). La información como la dirección de email podría venir de variables de entorno o una configuración central.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página de soporte debe mostrar una sección dedicada a otros canales de contacto.\n2. Debe haber una opción visible para contactar por email, que al hacer clic abra el cliente de correo del usuario con la dirección de soporte pre-rellenada.\n3. Si el chat en vivo está disponible, debe haber un botón o enlace claro para iniciarlo.\n4. Cada opción de contacto debe estar claramente diferenciada con un icono y un texto descriptivo.\n\n## Sugerencias Adicionales\n- Se podría incluir el horario de atención del equipo de soporte.\n- Añadir un enlace a las redes sociales de la empresa si también se ofrece soporte por esos canales.\n\n## Tarea para Editor IA\nCrea el componente `ContactChannels.tsx`. Este componente debe mostrar de forma atractiva al menos un enlace de email (`mailto:`) y un placeholder para un botón de chat. Integra este componente en `PáginadeSoporte/AyudaPage.tsx`, preferiblemente cerca del formulario de contacto.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Adaptación de Contenido de Ayuda según Rol del Usuario\n\n## Descripción\nComo profesional, quiero ver preguntas frecuentes específicas sobre la gestión de mi perfil y mis cobros, para no tener que navegar entre preguntas irrelevantes para clientes.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n\n## Lógica y Datos\nEl hook `usePáginadeSoporte/Ayuda.ts` debe obtener el rol del usuario actual (cliente, profesional, anónimo) del contexto de autenticación global. La llamada a la API en `api.ts` para obtener las FAQs puede ser modificada para enviar el rol del usuario como parámetro, permitiendo al backend filtrar y devolver solo el contenido relevante. Alternativamente, si el volumen de datos es pequeño, el frontend puede recibir todas las FAQs y filtrarlas según el rol.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Un usuario no autenticado (anónimo) ve un conjunto de FAQs generales.\n2. Un usuario autenticado como \'cliente\' ve las FAQs generales más las específicas para clientes (ej: sobre reservas, pagos).\n3. Un usuario autenticado como \'profesional\' ve las FAQs generales más las específicas para profesionales (ej: sobre gestión de perfil, cobros).\n4. Las categorías de FAQ irrelevantes para un rol de usuario no deben ser visibles para él.\n5. El cambio de contenido debe ser transparente para el usuario.\n\n## Sugerencias Adicionales\n- El formulario de contacto también podría tener campos o categorías que se adapten al rol del usuario.\n- Se podría mostrar un banner de bienvenida personalizado en la página de soporte, como \'Ayuda para Profesionales\'.\n\n## Tarea para Editor IA\nModifica el hook `usePáginadeSoporte/Ayuda.ts` para que acceda al rol del usuario desde un contexto de autenticación. Adapta la llamada en `api.ts` para que opcionalmente envíe el rol. Implementa la lógica de filtrado (ya sea en el hook o asumiendo que la API lo hace) para que los datos pasados a la página sean los correctos según el rol.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Asistente Virtual de Soporte para Respuestas Instantáneas\n\n## Descripción\nComo un usuario (cliente o profesional), quiero interactuar con un chatbot de soporte en la página de Ayuda para obtener respuestas instantáneas a preguntas comunes 24/7 y ser derivado a un agente humano si el chatbot no puede resolver mi consulta.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n- @src/features/pgina-de-soporte--ayuda/api.ts\n\n## Componentes a Crear\n- SupportChatbotWidget (component)\n- ChatBubble (component)\n- QuickReplyButton (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl hook `usePáginadeSoporte/Ayuda.ts` manejará el estado del chat: historial de mensajes, estado de \'escribiendo\' del bot y la lógica para enviar mensajes a un endpoint de la API (`/api/chatbot`). Este endpoint se comunicará con un servicio de NLP (como Dialogflow o similar) para procesar la entrada del usuario y devolver una respuesta estructurada.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Al hacer clic en un icono de \'Ayuda\' flotante, se abre la ventana del chatbot.\n2. El usuario puede escribir un mensaje y enviarlo presionando Enter o un botón de envío.\n3. El chatbot responde a preguntas básicas predefinidas (ej. \'¿Cómo cambio mi contraseña?\', \'¿Cuáles son los planes?\').\n4. Si el chatbot no entiende la pregunta o el usuario escribe \'hablar con un humano\', debe ofrecer la opción de crear un ticket de soporte.\n5. La conversación persiste mientras el usuario navega por la página de soporte.\n\n## Sugerencias Adicionales\n- Considerar integrar el chatbot con el sistema de seguimiento de incidencias para que pueda dar el estado de un ticket si el usuario está logueado.\n- Añadir un indicador de \'escribiendo...\' para mejorar la experiencia de usuario.\n\n## Tarea para Editor IA\nCrea los componentes `SupportChatbotWidget`, `ChatBubble` y `QuickReplyButton` dentro de `src/features/pgina-de-soporte--ayuda/components/`. Implementa la lógica inicial en el hook para gestionar un array de mensajes y un campo de entrada. Simula una respuesta del bot con un `setTimeout` de 1 segundo.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Calificación de Utilidad de Artículos de Ayuda\n\n## Descripción\nComo un usuario, quiero poder calificar si un artículo de la FAQ me resultó útil o no (con un simple \'Sí/No\') para proporcionar feedback directo que ayude a mejorar la calidad del contenido de soporte.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n- @src/features/pgina-de-soporte--ayuda/components/FaqItem.tsx\n\n## Componentes a Crear\n- ArticleFeedback (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- FaqAccordion from src/features/pgina-de-planes-y-suscripciones/components/FaqAccordion.tsx\n\n## Lógica y Datos\nEl componente `ArticleFeedback` recibirá el ID del artículo como prop. Al hacer clic en \'Sí\' o \'No\', se enviará una solicitud POST a un endpoint `/api/support/articles/{id}/feedback` con el voto. La API registrará el voto. El estado del componente cambiará para mostrar un mensaje de \'Gracias por tu feedback\' y deshabilitar los botones.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Debajo de cada respuesta de FAQ, aparece la pregunta \'¿Te resultó útil?\'.\n2. Junto a la pregunta, hay dos botones: \'Sí\' y \'No\'.\n3. Al hacer clic en cualquiera de los botones, se envía la calificación al backend.\n4. Después de hacer clic, los botones desaparecen y se muestra el mensaje \'¡Gracias por tu feedback!\'.\n5. El usuario no puede votar más de una vez en el mismo artículo por sesión.\n\n## Sugerencias Adicionales\n- Si el usuario hace clic en \'No\', se podría mostrar opcionalmente un pequeño campo de texto para feedback adicional.\n- El backend debe agregar esta información al `FeedbackQueue` para que los administradores la revisen.\n\n## Tarea para Editor IA\nCrea el componente `ArticleFeedback.tsx`. Intégralo al final del contenido de cada FAQ. Implementa la llamada a la API en `api.ts` y la lógica de estado local para mostrar el mensaje de agradecimiento post-votación.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Indicador de Estado del Sistema en Tiempo Real\n\n## Descripción\nComo un usuario que experimenta un problema, quiero ver un indicador claro del estado del sistema en la página de Soporte para saber si hay problemas técnicos conocidos (ej. \'Pagos interrumpidos\') antes de contactar a soporte.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n\n## Componentes a Crear\n- SystemStatusWidget (component)\n- ServiceStatusItem (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Lógica y Datos\nEl componente `SystemStatusWidget` realizará una llamada GET a un nuevo endpoint público `/api/system-status` al montarse. Este endpoint, gestionado desde el `backoffice-de-administracin/components/SystemHealthDashboard.tsx`, devolverá un objeto JSON con el estado de los servicios clave: `[{service: \'API\', status: \'operational\'}, {service: \'Payments\', status: \'degraded_performance\'}]`.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página de soporte muestra un widget de estado del sistema en una posición visible.\n2. El widget muestra un estado general (ej. \'Todos los sistemas operativos\').\n3. El widget lista el estado de al menos 3 servicios clave (Plataforma, Pagos, Mensajería).\n4. Cada servicio tiene un indicador de color (verde, amarillo, rojo) que corresponde a su estado.\n5. Si un servicio no está operativo, se muestra un breve mensaje explicativo.\n\n## Sugerencias Adicionales\n- Incluir un enlace a una página de estado dedicada (si existe) para más detalles.\n- Mostrar la hora de la última actualización para dar confianza al usuario.\n\n## Tarea para Editor IA\nCrea los componentes `SystemStatusWidget` y `ServiceStatusItem`. Implementa la llamada a la API en `api.ts` y la lógica para consumir los datos y renderizar el estado con los colores correspondientes en `PáginadeSoporte/AyudaPage.tsx`.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Formulario de Contacto Inteligente para Usuarios Registrados\n\n## Descripción\nComo un usuario registrado, quiero que el formulario de contacto en la página de Soporte se rellene automáticamente con mi nombre y correo electrónico para poder enviar mi consulta más rápidamente y sin errores.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n- @src/features/pgina-de-soporte--ayuda/components/SupportContactForm.tsx\n\n## Componentes a Crear\n- SupportContactForm (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEl hook `usePáginadeSoporte/Ayuda.ts` debe acceder a un contexto de autenticación global para obtener los datos del usuario actual (nombre, email, ID de usuario). Si el usuario está logueado, estos datos se pasarán como props al componente `SupportContactForm`, que los usará para establecer los valores iniciales de los campos correspondientes. Los campos deben estar deshabilitados para evitar su edición.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Si un usuario visita la página de soporte estando logueado, los campos \'Nombre\' y \'Email\' del formulario de contacto ya están rellenos.\n2. Los campos pre-rellenados están deshabilitados (read-only).\n3. Si un usuario no está logueado, los campos están vacíos y son editables.\n4. Al enviar el formulario, el ID del usuario se envía junto con la consulta si está logueado.\n\n## Sugerencias Adicionales\n- Si el usuario tiene un rol (cliente/profesional), se podría pre-seleccionar una categoría de \'Tipo de usuario\' en el formulario.\n- Mostrar un mensaje de bienvenida personalizado como \'Hola [Nombre], ¿en qué podemos ayudarte?\'.\n\n## Tarea para Editor IA\nModifica o crea el componente `SupportContactForm.tsx` para que acepte `initialData` como prop. Actualiza el hook `usePáginadeSoporte/Ayuda.ts` para que obtenga datos de un contexto de autenticación (puedes simularlo por ahora) y los pase al formulario. Aplica los estilos para los campos deshabilitados.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Biblioteca de Video-Tutoriales para Guías Visuales\n\n## Descripción\nComo un nuevo usuario (cliente o profesional), quiero acceder a una sección de video-tutoriales en la página de soporte para aprender visualmente a realizar tareas clave, como completar mi perfil o usar el panel de control.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n- @src/features/pgina-de-soporte--ayuda/api.ts\n\n## Componentes a Crear\n- VideoTutorialsSection (component)\n- VideoCard (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- VideoPlayerModal from src/features/home-pblica/components/VideoPlayerModal.tsx\n\n## Lógica y Datos\nEl hook `usePáginadeSoporte/Ayuda.ts` llamará a un nuevo endpoint en `api.ts` (`/api/support/videos`) para obtener una lista de objetos de video (ej. `{id, title, description, thumbnailUrl, videoUrl, forRole: \'professional\'}`). La página podrá filtrar estos videos según el rol del usuario si está logueado.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. La página de soporte contiene una sección titulada \'Video-Tutoriales\'.\n2. La sección muestra una cuadrícula de videos con miniaturas y títulos.\n3. Al hacer clic en una tarjeta de video, se abre un modal que reproduce el video correspondiente.\n4. El usuario puede cerrar el modal para volver a la galería de videos.\n5. Debe haber al menos un video para clientes y uno para profesionales.\n\n## Sugerencias Adicionales\n- Añadir etiquetas de categoría a cada video (ej. \'Facturación\', \'Perfil\', \'Reservas\') y permitir filtrar por ellas.\n- Medir las visualizaciones de video para identificar los tutoriales más útiles y las áreas donde los usuarios necesitan más ayuda visual.\n\n## Tarea para Editor IA\nCrea los componentes `VideoTutorialsSection` y `VideoCard` en `src/features/pgina-de-soporte--ayuda/components/`. Refactoriza `VideoPlayerModal.tsx` para que sea más genérico y muévelo a `src/components/`. Implementa la lógica de obtención de datos y renderizado en la página de soporte.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Envío y Votación de Sugerencias de Funcionalidades\n\n## Descripción\nComo un usuario comprometido, quiero enviar sugerencias para nuevas funcionalidades y votar en las ideas de otros desde la página de Soporte para participar activamente en la evolución de TheraFlow.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n- @src/features/backoffice-de-administracin/components/FeedbackQueue.tsx\n\n## Componentes a Crear\n- FeatureRequestSection (component)\n- FeatureRequestForm (component)\n- FeatureRequestList (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- Button from src/components/Button.jsx\n\n## Lógica y Datos\nEsta funcionalidad requiere que el usuario esté logueado. Un nuevo endpoint en la API (`/api/feature-requests`) permitirá obtener la lista de sugerencias (con el recuento de votos) y enviar nuevas. Otro endpoint (`POST /api/feature-requests/{id}/vote`) manejará la lógica de votación, asegurando que un usuario solo pueda votar una vez por sugerencia. Estos datos se vincularán al `FeedbackQueue` del backoffice.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Los usuarios logueados pueden ver una sección de \'Sugerencias de Funcionalidades\' en la página de soporte.\n2. Los usuarios pueden ver una lista de sugerencias enviadas por otros, ordenadas por número de votos.\n3. Los usuarios pueden hacer clic en un botón \'Votar\' en una sugerencia existente.\n4. El recuento de votos se actualiza inmediatamente después de votar y el botón se deshabilita.\n5. Hay un formulario para enviar una nueva sugerencia, que aparece en la lista después de ser enviada.\n\n## Sugerencias Adicionales\n- Añadir un estado a las sugerencias (ej. \'Recibida\', \'En consideración\', \'Implementada\') que los administradores puedan actualizar desde el backoffice.\n- Enviar una notificación al usuario cuando el estado de su sugerencia cambie.\n\n## Tarea para Editor IA\nCrea los componentes `FeatureRequestSection`, `FeatureRequestForm` y `FeatureRequestList`. Implementa las llamadas a la API correspondientes. El estado debe manejarse en el hook de la página de soporte, incluyendo la lista de sugerencias y la lógica de votación.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Ayuda Contextual Basada en la Página Actual\n\n## Descripción\nComo un usuario en la página de \'Planes y Suscripciones\', quiero ver una sección de \'Preguntas Frecuentes Relevantes\' en la misma página de Soporte para no tener que buscar entre todas las categorías.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/PáginadeSoporte/AyudaPage.tsx\n- @src/features/pgina-de-soporte--ayuda/hooks/usePáginadeSoporte/Ayuda.ts\n\n## Componentes a Crear\n- ContextualFAQ (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- FaqAccordion from src/features/pgina-de-planes-y-suscripciones/components/FaqAccordion.tsx\n\n## Lógica y Datos\nLa página de soporte leerá un parámetro de la URL, por ejemplo `/soporte?context=billing`. El hook `usePáginadeSoporte/Ayuda.ts` usará este parámetro para llamar a la API y obtener solo las FAQs etiquetadas con \'billing\'. El componente `ContextualFAQ` renderizará estas preguntas de forma prominente en la parte superior de la página.\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Si navego a `/soporte?context=billing`, la página muestra una sección destacada con FAQs sobre facturación y pagos.\n2. Si navego a `/soporte?context=profile`, la sección muestra FAQs sobre la gestión del perfil.\n3. Si no hay parámetro de contexto, esta sección no se muestra, y se ven todas las FAQs como de costumbre.\n4. Debe haber un enlace para \'Ver todas las preguntas\' si se está en una vista contextual.\n\n## Sugerencias Adicionales\n- Las páginas clave de la aplicación (Pagos, Perfil, etc.) deberían tener un enlace \'¿Necesitas ayuda con esto?\' que lleve a la página de soporte con el parámetro de contexto correcto.\n- Se puede usar el historial de navegación del usuario (si se consiente) para sugerir proactivamente un contexto.\n\n## Tarea para Editor IA\nImplementa la lógica en `usePáginadeSoporte/Ayuda.ts` para leer los query params de la URL usando `useSearchParams` de `react-router-dom`. Crea el componente `ContextualFAQ` que recibe y muestra las preguntas. Modifica `PáginadeSoporte/AyudaPage.tsx` para renderizar condicionalmente este componente.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/PáginadeSoporte\n Cuando termines, escribe: TAREA COMPLETADA.'
   $'# User Story: Sugerencia Automática de Categoría para Tickets de Soporte\n\n## Descripción\nComo usuario, quiero que el sistema me sugiera categorías relevantes para mi consulta mientras escribo en el formulario de contacto para asegurar que mi ticket sea dirigido al equipo correcto y se resuelva más rápido.\n\n## Contexto de la Página\nPágina de Soporte / Ayuda\n\n## Archivos Afectados\n- @src/features/pgina-de-soporte--ayuda/components/SupportContactForm.tsx\n- @src/features/pgina-de-soporte--ayuda/api.ts\n\n## Componentes a Crear\n- SuggestedCategories (component)\n\n los Componentes a crear se deben crear en la carpeta src/features/pgina-de-soporte--ayuda/components\n\n## Módulos a Importar\n- SupportContactForm from src/features/pgina-de-soporte--ayuda/components/SupportContactForm.tsx\n\n## Lógica y Datos\nEn el `SupportContactForm`, se usará un `useEffect` con un `debounce` para observar los cambios en el campo de texto de la descripción. Después de que el usuario deje de escribir por 500ms, se enviará el texto a un nuevo endpoint `/api/support/suggest-category`. El backend realizará un análisis de palabras clave y devolverá un array de categorías sugeridas (ej. [\'Facturación\', \'Problema técnico\', \'Perfil profesional\']).\n\n## Estilos\nIMPORTANTE: Revisar el @tailwind.config.js y usar esos colores definidos en la configuración.\n\n## Criterios de Aceptación\n1. Mientras escribo en el campo \'Descripción\' del formulario de contacto, no ocurre nada inmediatamente.\n2. Después de dejar de escribir por un breve momento, aparecen debajo del campo de 2 a 3 botones de categorías sugeridas.\n3. Si escribo \'pago\' o \'factura\', una de las sugerencias es \'Facturación\'.\n4. Al hacer clic en un botón de sugerencia, se selecciona automáticamente la categoría correspondiente en el campo \'Categoría\' del formulario.\n5. Si sigo escribiendo, las sugerencias se actualizan.\n\n## Sugerencias Adicionales\n- El mismo sistema podría sugerir artículos de FAQ relevantes para intentar desviar la creación del ticket por completo.\n- El modelo de sugerencias puede ser entrenado y mejorado con el tiempo basándose en cómo los agentes de soporte recategorizan los tickets.\n\n## Tarea para Editor IA\nImplementa la lógica de `debounce` dentro del componente `SupportContactForm.tsx`. Crea el endpoint simulado en `api.ts` y el componente `SuggestedCategories`. Integra todo para que las sugerencias aparezcan y sean funcionales.\n\n\n## RESTRICCIÓN IMPORTANTE\nPROHIBIDO TOCAR ARCHIVOS QUE NO SEAN DE LA CARPETA @src/features/pgina-de-soporte--ayuda/components\n Cuando termines, escribe: TAREA COMPLETADA.'
)
fi
# ──────────────────────────────────────────────────────────────────────

# ─── Función para imprimir con timestamp ───────────────────────────────
log() {
  echo "[$(date +'%H:%M:%S')] $*"
}

# ─── Ejecución de prompts ──────────────────────────────────────────────
for i in "${!prompts[@]}"; do
  prompt="${prompts[$i]}"
  [[ -z $prompt ]] && continue

  file="$TMPDIR/prompt_$i.md"
  printf '%s\n' "$prompt" > "$file"

  log "🚀 Prompt $((i+1)) de ${#prompts[@]} - Ejecutando"
  log "📝 Archivo: $file"
  log "🔍 Primeras líneas del prompt:"
  head -n 10 "$file" | sed 's/^/     /'

  start_time=$(date +%s)

  timeout 7m ./gemini_one.sh "$file" \
    && log "✅ Prompt $((i+1)) completado correctamente." \
    || log "⏱️ Tiempo excedido para el prompt $((i+1)), pasando al siguiente."

  end_time=$(date +%s)
  duration=$((end_time - start_time))
  log "⏱️ Duración: ${duration}s"

  echo "------------------------------------------------------------"
done
